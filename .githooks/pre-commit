#!/bin/bash

# BaseAPI Pre-commit Hook
# This hook runs basic quality checks before allowing commits

set -e

echo "🔍 Running pre-commit checks..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Get list of staged PHP files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.php$' || true)

if [ -z "$STAGED_FILES" ]; then
    print_warning "No PHP files staged for commit"
    exit 0
fi

print_status "Found $(echo "$STAGED_FILES" | wc -l | tr -d ' ') staged PHP file(s)"

# 1. PHP Syntax Check
print_status "Checking PHP syntax..."
SYNTAX_ERRORS=0

for FILE in $STAGED_FILES; do
    if [ -f "$FILE" ]; then
        php -l "$FILE" > /dev/null 2>&1
        if [ $? -ne 0 ]; then
            print_error "Syntax error in $FILE"
            php -l "$FILE"
            SYNTAX_ERRORS=1
        fi
    fi
done

if [ $SYNTAX_ERRORS -eq 1 ]; then
    print_error "Fix syntax errors before committing"
    exit 1
fi

print_success "PHP syntax check passed"

# 2. Check if composer.json was modified and composer.lock exists
if git diff --cached --name-only | grep -q "composer.json"; then
    if [ ! -f "composer.lock" ]; then
        print_error "composer.json modified but composer.lock not found"
        print_error "Run 'composer install' or 'composer update' first"
        exit 1
    fi
    
    if ! git diff --cached --name-only | grep -q "composer.lock"; then
        print_warning "composer.json modified but composer.lock not staged"
        print_warning "Consider staging composer.lock if dependencies changed"
    fi
fi

# 3. PHPStan Analysis (if available)
if [ -f "vendor/bin/phpstan" ]; then
    print_status "Running PHPStan analysis..."
    
    # Create temporary files with staged content for analysis
    TEMP_DIR=$(mktemp -d)
    trap "rm -rf $TEMP_DIR" EXIT
    
    # Copy staged files to temp directory maintaining structure
    for FILE in $STAGED_FILES; do
        if [ -f "$FILE" ]; then
            TEMP_FILE="$TEMP_DIR/$FILE"
            mkdir -p "$(dirname "$TEMP_FILE")"
            git show ":$FILE" > "$TEMP_FILE" 2>/dev/null || cp "$FILE" "$TEMP_FILE"
        fi
    done
    
    # Run PHPStan on staged files only
    if ! composer phpstan -- --no-progress --error-format=table $(echo $STAGED_FILES | tr '\n' ' ') 2>/dev/null; then
        print_error "PHPStan analysis failed"
        print_error "Fix the issues above before committing"
        exit 1
    fi
    
    print_success "PHPStan analysis passed"
else
    print_warning "PHPStan not available, skipping static analysis"
fi

# 4. Run tests (if test files are staged or if core files changed)
CORE_FILES_CHANGED=0
TEST_FILES_CHANGED=0

for FILE in $STAGED_FILES; do
    if [[ "$FILE" == app/* ]] || [[ "$FILE" == config/* ]] || [[ "$FILE" == routes/* ]]; then
        CORE_FILES_CHANGED=1
    fi
    if [[ "$FILE" == tests/* ]]; then
        TEST_FILES_CHANGED=1
    fi
done

if [ -f "vendor/bin/phpunit" ] && ([ $CORE_FILES_CHANGED -eq 1 ] || [ $TEST_FILES_CHANGED -eq 1 ]); then
    print_status "Running tests..."
    
    # Check if tests directory exists and has test files
    if [ -d "tests" ] && find tests -name "*.php" -type f | grep -q .; then
        if ! composer test -- --no-coverage --stop-on-failure 2>/dev/null; then
            print_error "Tests failed"
            print_error "Fix failing tests before committing"
            exit 1
        fi
        print_success "All tests passed"
    else
        print_warning "No test files found in tests/ directory, skipping tests"
    fi
else
    if [ ! -f "vendor/bin/phpunit" ]; then
        print_warning "PHPUnit not available, skipping tests"
    else
        print_status "No core files changed, skipping tests"
    fi
fi

# 5. Check for common issues
print_status "Checking for common issues..."

# Check for var_dump, dd, die, etc.
FORBIDDEN_FUNCTIONS="var_dump\|print_r\|die\|exit\|dd\|dump"
if echo "$STAGED_FILES" | xargs grep -l "$FORBIDDEN_FUNCTIONS" 2>/dev/null; then
    print_error "Found debugging functions in staged files:"
    echo "$STAGED_FILES" | xargs grep -n "$FORBIDDEN_FUNCTIONS" 2>/dev/null || true
    print_error "Remove debugging code before committing"
    exit 1
fi

# Check for TODO/FIXME comments in new code
NEW_TODOS=$(git diff --cached | grep "^+" | grep -i "todo\|fixme" || true)
if [ ! -z "$NEW_TODOS" ]; then
    print_warning "Found new TODO/FIXME comments:"
    echo "$NEW_TODOS"
    print_warning "Consider addressing these before committing"
fi

print_success "Common issues check passed"

# 6. File size check
print_status "Checking file sizes..."
LARGE_FILES=$(echo "$STAGED_FILES" | xargs ls -la 2>/dev/null | awk '$5 > 1048576 {print $9 " (" $5 " bytes)"}' || true)
if [ ! -z "$LARGE_FILES" ]; then
    print_warning "Large files detected (>1MB):"
    echo "$LARGE_FILES"
    print_warning "Consider if these files should be committed"
fi

print_success "File size check passed"

# All checks passed
print_success "All pre-commit checks passed! 🎉"
print_status "Proceeding with commit..."

exit 0
